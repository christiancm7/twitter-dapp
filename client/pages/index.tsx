import { ConnectButton } from "@rainbow-me/rainbowkit";
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { useAccount } from "wagmi";
import Web3 from "web3";
import jsonInterface from "../Twitter.json";
import logo from "../assets/images/logo.png";
import {
  AppBar,
  Avatar,
  Box,
  Button,
  Card,
  CardActions,
  Container,
  Divider,
  Grid,
  Stack,
  TextField,
  Toolbar,
} from "@mui/material";
import Image from "next/image";

const ca = "0xcfaddf26c7732888d935717a23bac5af64fe86fc";

const Home: NextPage = () => {
  const { address, isConnected } = useAccount();
  const [web3, setWeb3] = useState<Web3 | null>(null);
  const [contract, setContract] = useState<any>(null);
  const [post, setPost] = useState<string>("");

  async function createTweet() {
    if (!post.length) return;
    if (contract) {
      alert("Please enter");
      try {
        const send = await contract.methods
          .createTweet(post)
          .send({ from: address });
        if (send) {
          setPost("");
        }
      } catch (error) {}
    } else {
      alert("Could not find contract. Please try again later.");
    }
  }

  async function displayTweets(userAddress: string) {
    const tweets = await contract.methods.getAllTweets(userAddress).call();

    console.log(tweets, "********************************");
  }

  useEffect(() => {
    if (typeof window !== "undefined" && isConnected) {
      const web3Instance = new Web3(window.ethereum);
      setWeb3(web3Instance);

      const contractInstance = new web3Instance.eth.Contract(
        jsonInterface.abi,
        ca
      );
      setContract(contractInstance);
    }
  }, [isConnected]);

  useEffect(() => {
    if (contract && address) {
      displayTweets(address);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [address, contract]);

  return (
    <Box>
      <Head>
        <title>TwitterDapp</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>
      <AppBar position="static" elevation={1}>
        <Toolbar>
          <Box
            sx={{
              display: "flex",
              flex: 1,
              justifyContent: "space-between",
            }}
          >
            <Image src={logo} alt="Logo" height={80} />
            {isConnected && (
              <Box sx={{ alignSelf: "center " }}>
                <ConnectButton />
              </Box>
            )}
          </Box>
        </Toolbar>
      </AppBar>
      <Container maxWidth="sm">
        {!isConnected && (
          <Box
            sx={{
              display: "flex",
              flexDirection: "column",
              justifyContent: "center",
              alignItems: "center",
              minHeight: "100vh",
            }}
          >
            <Image src={logo} alt="Logo" height={200} />
            <ConnectButton />
          </Box>
        )}
        <Card variant="outlined" sx={{ borderRadius: 0, p: 1, mt: 1 }}>
          <Grid container>
            <Grid
              item
              xs={2}
              sx={{
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                height: "100%",
              }}
            >
              <Avatar>CM</Avatar>
            </Grid>
            <Grid item xs={10}>
              <TextField
                fullWidth
                multiline
                value={post}
                onChange={(e) => setPost(e.target.value)}
                placeholder="Whats going on?!"
                id="standard-basic"
                label="My tweet"
                variant="standard"
                InputLabelProps={{
                  shrink: true,
                }}
              />
            </Grid>
          </Grid>
          <CardActions
            sx={{
              display: "flex",
              justifyContent: "flex-end",
            }}
          >
            <Button
              disableElevation
              size="small"
              variant="contained"
              disabled={Boolean(post.length <= 0)}
              onClick={createTweet}
              sx={{
                borderRadius: 15,
                p: 0.8,
              }}
            >
              Post
            </Button>
          </CardActions>
        </Card>
        <Stack
          direction="column"
          mt={1}
          divider={<Divider variant="inset" />}
        ></Stack>
      </Container>
    </Box>
  );
};

export default Home;
